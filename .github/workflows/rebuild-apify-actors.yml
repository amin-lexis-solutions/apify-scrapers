name: Conditional Apify Actor Deployment

on:
  push:
    paths:
      - 'packages/**'
      - 'scripts/**'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3

      # New step to check if it's the initial push
      - name: Check for Initial Push
        id: check_initial_push
        run: |
          if [ $(git rev-list --count HEAD) -eq 1 ]; then
            echo "It's the initial push."
            echo "::set-output name=is_initial::true"
          else
            echo "::set-output name=is_initial::false"
          fi

      - name: Get list of changed files
        id: get_changed_files
        if: steps.check_initial_push.outputs.is_initial == 'false'
        uses: jitterbit/get-changed-files@v1
        with:
          format: 'json'

      - name: Set matrix for deployment
        id: set-matrix
        run: |
          const isInitialPush = '${{ steps.check_initial_push.outputs.is_initial }}' === 'true';
          let rebuildAll = isInitialPush;
          const actors = new Set();

          if (!isInitialPush) {
            const changedFiles = JSON.parse('${{ steps.get_changed_files.outputs.files }}');
            changedFiles.forEach(file => {
              if (file.startsWith('packages/shared')) {
                rebuildAll = true;
              } else {
                const match = file.match(/^packages\/(.*?)\//);
                if (match && match[1] !== 'api' && match[1] !== 'shared') {
                  actors.add(match[1]);
                }
              }
            });
          }

          const matrix = { include: [] };

          if (rebuildAll) {
            console.log("Rebuilding all actors");
            // Add logic here to dynamically include all actors for initial push or when shared is modified
            ['actor1', 'actor2'].forEach(actor => matrix.include.push({ actor })); // Placeholder for actor names
          } else {
            console.log(`Rebuilding specific actors: ${[...actors].join(', ')}`);
            actors.forEach(actor => matrix.include.push({ actor }));
          }

          console.log(`::set-output name=matrix::${JSON.stringify(matrix)}`);
        shell: bash

  deploy:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install

      - name: Deploy Actor
        run: ./scripts/deploy-apify.js ${{ matrix.actor }} puppeteer
