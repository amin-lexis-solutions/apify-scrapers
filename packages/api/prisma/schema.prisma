// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ArchiveReason {
  expired
  unexpired
  manual
}

model Coupon {
  id                 String         @id
  sourceId           String
  idInSite           String
  domain             String?
  merchantName       String
  title              String
  description        String?
  termsAndConditions String?
  expiryDateAt       DateTime?
  code               String?
  startDateAt        DateTime?
  sourceUrl          String
  isShown            Boolean?
  isExpired          Boolean?
  isExclusive        Boolean?
  firstSeenAt        DateTime       @default(now())
  lastSeenAt         DateTime       @default(now())
  archivedAt         DateTime?
  localeId           String
  archivedReason     ArchiveReason?

  source Source       @relation(fields: [sourceId], references: [id])
  locale TargetLocale @relation(fields: [localeId], references: [id], onDelete: Cascade)

  @@index([sourceId])
  @@index([localeId])
  @@index([archivedAt])
  @@index([domain])
}

// A source of coupons, handled by an Apify actor
model Source {
  id           String         @id @default(uuid())
  apifyActorId String         @unique
  name         String
  domains      SourceDomain[]
  isActive     Boolean        @default(true)
  lastRunAt    DateTime?
  coupons      Coupon[]
  runs         ProcessedRun[]
}

model SourceDomain {
  id       String @id @default(uuid())
  domain   String
  source   Source @relation(fields: [sourceId], references: [id])
  sourceId String
}

// Maps to a single Apify actor run
model ProcessedRun {
  id               String    @id @default(uuid())
  actorId          String
  actorRunId       String    @unique
  finishedAt       DateTime  @default(now())
  processedAt      DateTime?
  status           String
  resultCount      Int       @default(0)
  createdCount     Int       @default(0)
  updatedCount     Int       @default(0)
  archivedCount    Int       @default(0)
  unarchivedCount  Int       @default(0)
  errorCount       Int       @default(0)
  processingErrors Json?
  source           Source?   @relation(fields: [actorId], references: [id])
}

// Maps to a locale we are targeting
model TargetLocale {
  id             String       @id @default(uuid())
  locale         String       @unique
  countryCode    String
  languageCode   String
  searchTemplate String // e.g. "{{website}} coupon codes"
  isActive       Boolean      @default(true)
  lastSerpRunAt  DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  pages          TargetPage[]
  coupons        Coupon[]
}

// Maps to a page we want to scrape using an Apify actor
model TargetPage {
  id             String    @id @default(uuid())
  url            String    @unique
  domain         String
  title          String
  searchTerm     String
  searchPosition Int
  searchDomain   String // e.g. google.com.sg
  apifyRunId     String?
  lastApifyRunAt DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
  localeId       String

  locale TargetLocale @relation(fields: [localeId], references: [id])

  stats     CouponStats[]
  anomalies CouponAnomalyLog[]

  @@index([localeId])
  @@index([url])
}

// Tracking for coupon counts over time to detect anomalies in target pages
model CouponStats {
  id                 String     @id @default(uuid())
  targetPage         TargetPage @relation(fields: [sourceUrl], references: [url])
  sourceUrl          String
  averageCouponCount Int
  standardDeviation  Float // Population standard deviation
  surgeThreshold     Int // Number of standard deviations above the mean
  plungeThreshold    Int // Number of standard deviations below the mean
  createdAt          DateTime   @default(now())
}

// Logs for detected anomalies in coupon counts for a page over time
model CouponAnomalyLog {
  id          String     @id @default(uuid())
  targetPage  TargetPage @relation(fields: [sourceUrl], references: [url])
  sourceUrl   String
  couponCount Int
  anomalyType String // Surge or Plunge
  createdAt   DateTime   @default(now())
}
