// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ArchiveReason {
  expired
  unexpired
  manual
  removed
}

enum Reliability {
  reliable
  unreliable
}

model Coupon {
  id                 String         @id
  apifyActorId       String
  idInSite           String
  domain             String?
  merchantName       String
  merchantId         String
  title              String
  description        String?
  termsAndConditions String?
  expiryDateAt       DateTime?      @db.Date
  code               String?
  startDateAt        DateTime?      @db.Date
  sourceUrl          String
  sourceDomain       String?
  isShown            Boolean        @default(false)
  isExpired          Boolean?
  isExclusive        Boolean?
  firstSeenAt        DateTime       @default(now())
  lastSeenAt         DateTime       @default(now())
  lastCrawledAt      DateTime?
  archivedAt         DateTime?
  shouldBeFake       Boolean?
  locale             String
  archivedReason     ArchiveReason?


  source_relation Source       @relation(fields: [apifyActorId], references: [apifyActorId])

  locale_relation TargetLocale @relation(fields: [locale], references: [locale], onDelete: Cascade)

  merchant_relation Merchant @relation(fields: [merchantId], references: [id])

  source_domain_relation SourceDomain? @relation(fields: [sourceDomain], references: [domain])

  @@index([apifyActorId])
  @@index([locale])
  @@index([archivedAt])
  @@index([isShown])
  @@index([domain])
  @@index([code])
  @@index([shouldBeFake])
  @@index([isExclusive])

}

// A source of coupons, handled by an Apify actor
model Source {
  id           String         @id @default(uuid())
  apifyActorId String         @unique
  name         String
  domains      SourceDomain[]
  isActive     Boolean        @default(true)
  lastRunAt    DateTime?
  coupons      Coupon[]
  runs         ProcessedRun[]
  maxStartUrls Int?
}

model SourceDomain {
  id                String      @id @default(uuid())
  domain            String      @unique
  reliability       Reliability @default(reliable)
  source_relation   Source      @relation(fields: [apifyActorId], references: [apifyActorId])
  apifyActorId      String
  proxyCountryCode  String?

  coupons           Coupon[]
}

// Maps to a single Apify actor run
model ProcessedRun {
  id                  String    @id @default(uuid())
  apifyActorId        String?
  localeId            String?
  actorRunId          String    @unique
  startedAt           DateTime  @default(now())
  endedAt             DateTime?
  status              String
  resultCount         Int       @default(0)
  createdCount        Int       @default(0)
  updatedCount        Int       @default(0)
  archivedCount       Int       @default(0)
  unarchivedCount     Int       @default(0)
  errorCount          Int       @default(0)
  processingErrors    Json?
  costInUsdMicroCents Int       @default(0)
  payload             Json?
  source_relation       Source?       @relation(fields: [apifyActorId], references: [apifyActorId])
  targetLocale TargetLocale? @relation(fields: [localeId], references: [id])
}

// Maps to a locale we are targeting
model TargetLocale {
  id             String         @id @default(uuid())
  locale         String         @unique
  countryCode    String
  languageCode   String
  searchTemplate String // e.g. "{{website}} coupon codes"
  isActive       Boolean        @default(true)
  lastSerpRunAt  DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now())
  pages          TargetPage[]
  coupons        Coupon[]
  runs           ProcessedRun[]
  merchants      Merchant[]

  @@unique([countryCode, languageCode])
}

// Maps to a page we want to scrape using an Apify actor
model TargetPage {
  id                 String    @id @default(uuid())
  url                String    @unique
  domain             String
  title              String
  searchTerm         String
  searchPosition     Int
  searchDomain       String // e.g. google.com.sg
  apifyRunId         String?
  lastApifyRunAt     DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now())
  localeId           String
  markedAsNonIndexAt DateTime?
  disabledAt         DateTime?
  verified_locale    String? // e.g. en_US
  merchantId         String
  locale TargetLocale @relation(fields: [localeId], references: [id])
  merchant Merchant? @relation(fields: [merchantId], references: [id])
  @@index([localeId])
  @@index([merchantId])
  @@index([url])
}

// Tracking for coupon counts over time to detect anomalies in target pages
model CouponStats {
  id              String   @id @default(uuid())
  sourceUrl       String
  couponsCount    Int // Number of coupons on the page
  surgeThreshold  Int // Number of standard deviations above the mean
  plungeThreshold Int // Number of standard deviations below the mean
  createdAt       DateTime @default(now())
}

model Test {
  id             String   @id @default(uuid())
  apifyTestRunId String
  apifyActorId   String   @unique
  status         String
  lastRunAt      DateTime @default(now())
}

model Merchant {
  id             String         @id @default(uuid())
  oberst_id      BigInt
  locale         String         @db.VarChar(255)
  name           String         @db.VarChar(255)
  domain         String         @db.VarChar(255)
  disabledAt     DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now())
  targetPages    TargetPage[]
  coupons        Coupon[]

  @@unique([locale, oberst_id])

  @@index([disabledAt])
  @@index([oberst_id])
  @@index([locale])
  @@index([name])

  locale_relation TargetLocale @relation(fields: [locale], references: [locale], onDelete: Cascade)
}
